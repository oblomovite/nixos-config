# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  nixpkgs = {
    system = "x86_64-linux";
    config = {
      allowUnfree = true;
    };
    overlays = [(import ../../packages/overlay.nix {
      # inherit secrets;
    })
               ];
  };


  imports = [
    ./hardware-configuration.nix
    ../../packages/portable.nix
    ../../users/rob.nix
    ../../fonts.nix
    ../../hardware.nix
    ../../services.nix
    ../../programs.nix
#    ../../packages/symlinks/service.nix
#    ../../vm/host.nix
  ];

  boot.initrd.luks.devices."root" = {
    device = "/dev/nvme0n1p2";
    preLVM = true;
  };

  networking.hostName = "oblomovite"; # Define your hostname.
  #networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
  networking.networkmanager.enable = true;

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  networking.useDHCP = false;
  networking.interfaces.enp0s20f0u3.useDHCP = true;
  networking.interfaces.wlo1.useDHCP = true;

  services.emacs = {
    enable = true;
    package = pkgs.custom-emacs;
    defaultEditor = true;
  };

  systemd.user.services.emacs.unitConfig = {
    ConditionGroup = "users";
  };

  boot = {
    #supportedFilesystems = [ "nfs" ];
    kernelPackages = pkgs.linuxPackages;
    kernelParams = [
    	"i915.enable_fbc=1" # Enable Framebuffer Compression
    ];

  # Use the systemd-boot EFI boot loader.
    loader = {
      systemd-boot.enable = true;
      systemd-boot.configurationLimit = 15;
      efi.canTouchEfiVariables = true;
    };
  };

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";
   console = {
     font = "Lat2-Terminus16";
     keyMap = "us";
   };

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  #   pinentryFlavor = "gnome3";
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound.
   sound.enable = true;
   #hardware.pulseaudio.enable = true;

  time.timeZone = "America/New_York";

  hardware = {
    cpu.intel.updateMicrocode = true;
    enableAllFirmware = true;
    # Not sure if I need this
    opengl.enable = true;
  };


  documentation.man.enable = true;

  security.sudo = {
    enable = true;
    wheelNeedsPassword = false;
  };

  nix = {
    # useSandbox = true;
    # distributedBuilds = true;
    # buildMachines = secrets.buildMachines;
    # nixPath = [
    #   "nixpkgs=/nix/var/nix/profiles/per-user/root/channels/nixos"
    #   "nixos-config=${toString root}/devices/morbo/configuration.nix"
    # ];
    gc = {
      automatic = true;
      dates = "*:0/10";
    };
  };

  systemd.services.nix-gc.unitConfig.ConditionACPower = true;

  # Keybindings for setting brightness
  programs.light.enable = true;


  programs.waybar.enable = true;
  programs.sway = {
    enable = true;
    extraPackages = with pkgs; [
      alacritty
      rofi 
      light
      swaylock # lockscreen
      swayidle
      xwayland # for legacy apps
      waybar # status bar
      mako # notification daemon
      kanshi # autorandr
      wl-clipboard

    ];
    ## What does this do
    wrapperFeatures = { gtk = false; };
  };


  environment = {
    
       loginShellInit = ''
           if [ "$(tty)" = "/dev/tty1" ]; then
               exec sway
           fi
       '';

    etc = {
      # Put config files in /etc. Note that you also can put these in ~/.config, but then you can't manage them with NixOS anymore!
      "sway/config".source = ./../../packages/swayconfig/config;
      "xdg/waybar/config".source = ./../../packages/swayconfig/waybar/config;
      "xdg/waybar/style.css".source = ./../../packages/swayconfig/waybar/style.css;
      "xdg/kanshi/config".source = ./../../packages/swayconfig/kanshi/config;

      #"i3/config".source = ./../../packages/i3config/config;
    };
  };

  services = {
    interception-tools = {
      enable = true;
      udevmonConfig = 
        ''
        - JOB: "intercept -g $DEVNODE | caps2esc | uinput -d $DEVNODE"
          DEVICE:
            EVENTS:
              EV_KEY: [KEY_CAPSLOCK, KEY_ESC]
      '';
    };
  };

  services.lorri.enable = true;
  system.autoUpgrade = {
    enable = true;
    channel = https://nixos.org/channels/nixos-unstable;
  };

  powerManagement = {
    enable = true;
    cpuFreqGovernor = "ondemand";
    powertop.enable = true;
  };

  system.stateVersion = "20.03"; # Did you read the comment?
}

